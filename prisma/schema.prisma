// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres" // NOTE: sqlite does not work with NextAuth.js
    url      = env("DATABASE_URL")
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts    Account[]
    sessions    Session[]
    rootFolders RootFolder[]
    folders     Folder[]
    files       File[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model RootFolder {
    id String @id @default(cuid())

    userId  String   @unique
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    folders Folder[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique(fields: [id, userId], name: "RootFolderUniqueIdentifier")
}

model Folder {
    id       String  @id @default(cuid())
    name     String
    favorite Boolean @default(false)
    color    Colors  @default(GRAY)

    userId         String
    user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    rootFolderId   String
    rootFolder     RootFolder @relation(fields: [rootFolderId], references: [id], onDelete: Cascade)
    parentFolderId String?
    parentFolder   Folder?    @relation("ParentFolder", fields: [parentFolderId], references: [id], onDelete: Cascade)
    folders        Folder[]   @relation("ParentFolder")
    files          File[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique(fields: [id, userId, rootFolderId], name: "FolderUniqueIdentifier")
}

model File {
    id       String  @id @default(cuid())
    name     String
    favorite Boolean @default(false)

    userId         String
    user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    parentFolderId String?
    parentFolder   Folder? @relation(fields: [parentFolderId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique(fields: [id, userId], name: "FileUniqueIdentifier")
}

enum Colors {
    RED
    ORANGE
    YELLOW
    GREEN
    BLUE
    PURPLE
    PINK
    BROWN
    GRAY
}
